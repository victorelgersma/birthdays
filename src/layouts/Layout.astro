---
import '../styles/global.css'

interface Props {
  title: string
}

const { title } = Astro.props

// Menu items
const menuItems = [
  {
    title: 'Birthdays',
    url: '/',
    icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6',
  },
  {
    title: 'Import & Export',
    url: '/backup',
    icon: 'M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12',
  },
]
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
  </head>
  <body class="min-h-screen bg-gray-50">
    <!-- Drawer Backdrop - only for small screens -->
    <div
      id="drawerBackdrop"
      class="md:hidden fixed inset-0 bg-gray-900/30 backdrop-blur-sm z-20 hidden transition-all"
    >
    </div>

    <!-- Drawer - only for small screens -->
    <div
      id="drawer"
      class="md:hidden fixed inset-y-0 left-0 w-64 bg-white shadow-lg transform -translate-x-full transition-transform duration-300 ease-in-out z-30"
    >
      <div class="p-5">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-xl font-bold text-blue-600">Menu</h2>
          <button id="closeDrawer" class="p-1 rounded-full hover:bg-gray-100">
            <svg
              class="w-6 h-6 text-gray-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <nav>
          <ul class="space-y-3">
            {
              menuItems.map((item) => (
                <li>
                  <a
                    href={item.url}
                    class:list={[
                      'block py-2 px-4 rounded transition-colors',
                      Astro.url.pathname === item.url
                        ? 'bg-blue-100 text-blue-700'
                        : 'hover:bg-blue-50 text-gray-700 hover:text-blue-600',
                    ]}
                  >
                    <svg
                      class="w-6 h-6 inline-block mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d={item.icon}
                      />
                    </svg>
                    {item.title}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </div>
    </div>

    <!-- Header with responsive navigation -->
    <header class="bg-white shadow-sm">
      <div
        class="container mx-auto px-4 py-3 flex justify-between items-center"
      >
        <!-- Mobile hamburger - hidden on md+ screens -->
        <button
          id="openDrawer"
          class="md:hidden p-1 rounded-full hover:bg-gray-100"
        >
          <svg
            class="w-6 h-6 text-gray-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>

        <!-- Logo/Title -->
        <div class="font-medium text-lg text-blue-600">
          <a href="/" class="flex items-center">
            {title}
          </a>
        </div>

        <!-- Desktop navbar - hidden on small screens, visible on md+ -->
        <nav class="hidden md:block">
          <ul class="flex space-x-6">
            {
              menuItems.map((item) => (
                <li>
                  <a
                    href={item.url}
                    class:list={[
                      'block py-1 px-2 rounded transition-colors',
                      Astro.url.pathname === item.url
                        ? 'bg-blue-100 text-blue-700'
                        : 'hover:bg-blue-50 text-gray-700 hover:text-blue-600',
                    ]}
                  >
                    {item.title}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>

        <!-- Placeholder for mobile - hidden on md+ screens -->
        <div class="w-6 md:hidden"></div>
      </div>
    </header>

    <!-- Main content -->
    <div class="pt-4">
      <slot />
    </div>

    <script>
      // Drawer functionality - only needed for mobile
      const drawer = document.getElementById('drawer')
      const drawerBackdrop = document.getElementById('drawerBackdrop')
      const openDrawerBtn = document.getElementById('openDrawer')
      const closeDrawerBtn = document.getElementById('closeDrawer')

      // Only set up drawer if elements exist (they won't be interactive on desktop)
      if (drawer && drawerBackdrop && openDrawerBtn && closeDrawerBtn) {
        // Open drawer
        openDrawerBtn.addEventListener('click', () => {
          drawer.classList.remove('-translate-x-full')
          drawerBackdrop.classList.remove('hidden')
          document.body.classList.add('overflow-hidden')
        })

        // Close drawer function
        function closeDrawer() {
          drawer.classList.add('-translate-x-full')
          drawerBackdrop.classList.add('hidden')
          document.body.classList.remove('overflow-hidden')
        }

        // Close drawer with button
        closeDrawerBtn.addEventListener('click', closeDrawer)

        // Close drawer when clicking outside
        drawerBackdrop.addEventListener('click', closeDrawer)

        // Add a touch event listener to enable swipe to open drawer
        let touchStartX = 0
        document.addEventListener('touchstart', (e) => {
          touchStartX = e.changedTouches[0].screenX
        })
        document.addEventListener('touchend', (e) => {
          const touchEndX = e.changedTouches[0].screenX
          const diff = touchEndX - touchStartX
          if (diff > 100) {
            // Right swipe
            drawer.classList.remove('-translate-x-full')
            drawerBackdrop.classList.remove('hidden')
          } else if (
            diff < -100 &&
            !drawer.classList.contains('-translate-x-full')
          ) {
            // Left swipe
            closeDrawer()
          }
        })
      }
    </script>
  </body>
</html>
