---

---

<div class="flex items-center space-x-2">
  <button
    id="openModalBtn"
    class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
  >
    Add Birthday ðŸŽ‚
  </button>
</div>

<!-- Modal -->
<div
  id="birthdayModal"
  class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full"
>
  <div
    class="relative top-20 mx-auto p-6 border w-96 shadow-lg rounded-md bg-white"
  >
    <div>
      <h3 class="text-lg font-medium mb-5">Add New Birthday</h3>
      <form id="addBirthdayForm" class="space-y-5">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1.5"
            >Name</label
          >
          <input
            type="text"
            name="name"
            required
            class="block w-full rounded-md border-gray-300 shadow-sm px-3 py-2 focus:border-blue-500 focus:ring-blue-500"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1.5"
            >Birthday</label
          >
          <div class="grid grid-cols-2 gap-4">
            <select
              name="month"
              required
              class="block w-full rounded-md border-gray-300 shadow-sm px-3 py-2 focus:border-blue-500 focus:ring-blue-500"
            >
              <option value="">Month</option>
              <option value="1">January</option>
              <option value="2">February</option>
              <option value="3">March</option>
              <option value="4">April</option>
              <option value="5">May</option>
              <option value="6">June</option>
              <option value="7">July</option>
              <option value="8">August</option>
              <option value="9">September</option>
              <option value="10">October</option>
              <option value="11">November</option>
              <option value="12">December</option>
            </select>
            <input
              type="number"
              name="day"
              required
              min="1"
              max="31"
              placeholder="Day"
              class="block w-full rounded-md border-gray-300 shadow-sm px-3 py-2 focus:border-blue-500 focus:ring-blue-500"
            />
          </div>
        </div>

        <div class="pt-1">
          <label class="flex items-center mb-2">
            <input
              type="checkbox"
              id="includeYear"
              name="includeYear"
              class="rounded text-blue-500 mr-2"
            />
            <span class="text-sm text-gray-700">Include year</span>
          </label>
          <input
            type="number"
            id="yearInput"
            name="year"
            placeholder="Year"
            disabled
            class="block w-full rounded-md border-gray-300 shadow-sm px-3 py-2 focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100"
          />
        </div>

        <div class="flex justify-end space-x-3 pt-2">
          <button
            type="button"
            id="closeModalBtn"
            class="px-5 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-5 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById('birthdayModal')
  const openBtn = document.getElementById('openModalBtn')
  const closeBtn = document.getElementById('closeModalBtn')
  const form = document.getElementById('addBirthdayForm')
  const includeYearCheckbox = document.getElementById('includeYear')
  const yearInput = document.getElementById('yearInput') as HTMLInputElement

  // Toggle year input
  includeYearCheckbox?.addEventListener('change', (e) => {
    if (yearInput) {
      yearInput.disabled = !(e.target as HTMLInputElement).checked
      if (yearInput.disabled) {
        yearInput.value = ''
      }
    }
  })

  // Modal controls
  openBtn?.addEventListener('click', () => {
    modal?.classList.remove('hidden')
  })

  closeBtn?.addEventListener('click', () => {
    modal?.classList.add('hidden')
    form?.reset()
  })

  // Close on outside click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden')
      form?.reset()
    }
  })

  // Handle form submission
  form?.addEventListener('submit', (e) => {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)

    const name = formData.get('name') as string
    const month = parseInt(formData.get('month') as string)
    const day = parseInt(formData.get('day') as string)

    // Create birthday object
    const birthday = {
      month,
      day,
      ...(formData.get('includeYear') && {
        year: parseInt(formData.get('year') as string),
      }),
    }

    try {
      // Get existing birthdays
      const stored = localStorage.getItem('birthdays')
      const birthdays = stored ? JSON.parse(stored) : {}

      // Add new birthday
      birthdays[name] = birthday

      // Save back to localStorage
      localStorage.setItem('birthdays', JSON.stringify(birthdays))

      // Close modal and reset form
      modal?.classList.add('hidden')
      form.reset()

      // Refresh the page to show new birthday
      // In a more sophisticated app, we'd use events or state management
      window.location.reload()
    } catch (error) {
      console.error('Failed to save birthday:', error)
      alert('Failed to save birthday. Please try again.')
    }
  })

  // Download functionality
  const downloadBtn = document.getElementById('downloadBtn')
  downloadBtn?.addEventListener('click', () => {
    try {
      const stored = localStorage.getItem('birthdays')
      const birthdays = stored ? JSON.parse(stored) : {}

      const blob = new Blob([JSON.stringify(birthdays, null, 2)], {
        type: 'application/json',
      })
      const url = URL.createObjectURL(blob)

      const a = document.createElement('a')
      a.href = url
      a.download = `birthday-backup-${new Date().toISOString().split('T')[0]}.json`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Failed to download backup:', error)
      alert('Failed to create backup. Please try again.')
    }
  })

  // Restore functionality
  const dropZone = document.getElementById('dropZone')

  dropZone?.addEventListener('dragover', (e) => {
    e.preventDefault()
    dropZone.classList.add('border-blue-500')
  })

  dropZone?.addEventListener('dragleave', () => {
    dropZone.classList.remove('border-blue-500')
  })

  dropZone?.addEventListener('drop', async (e) => {
    e.preventDefault()
    dropZone.classList.remove('border-blue-500')

    try {
      const file = e.dataTransfer?.files[0]
      if (!file) return

      const text = await file.text()
      const birthdays = JSON.parse(text)

      // Validate the structure
      const isValid = Object.values(birthdays).every(
        (birthday: any) =>
          typeof birthday === 'object' &&
          'month' in birthday &&
          'day' in birthday
      )

      if (!isValid) {
        throw new Error('Invalid backup file format')
      }

      localStorage.setItem('birthdays', JSON.stringify(birthdays))
      window.location.reload()
    } catch (error) {
      console.error('Failed to restore backup:', error)
      alert('Failed to restore backup. Please ensure the file is valid.')
    }
  })

  // Prevent default drag behaviors
  ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {
    document.body.addEventListener(eventName, (e) => e.preventDefault())
  })
</script>
